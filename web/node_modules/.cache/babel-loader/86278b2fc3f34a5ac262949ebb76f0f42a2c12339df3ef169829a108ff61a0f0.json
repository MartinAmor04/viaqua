{"ast":null,"code":"var _jsxFileName = \"/home/noelia/react/web/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport AlertTable from \"./components/AlertTable\";\nimport Graphs from \"./components/Graphs\";\nimport { fetchAlerts } from \"./services/api\";\nimport 'leaflet/dist/leaflet.css';\nimport MapComponent from \"./components/MapComponent\";\nimport \"./styles/main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [filters, setFilters] = useState({\n    estado: \"Activas\",\n    tipo: \"Todos\",\n    ubicacion: \"Todas\",\n    mes: new Date().toLocaleString(\"en-US\", {\n      month: \"short\"\n    }) // ‚úÖ Guardamos el mes en formato \"Jan\"\n  });\n  const [alerts, setAlerts] = useState([]); // Datos filtrados\n  const [alertsSinFiltrar, setAlertsSinFiltrar] = useState([]); // Todos los datos\n\n  useEffect(() => {\n    fetchAlerts(filters.estado).then(data => {\n      console.log(\"üîç Datos obtenidos de fetchAlerts:\", data); // Verifica si la API responde\n\n      setAlertsSinFiltrar(data); // Guarda todos los datos sin filtrar (para el gr√°fico de barras)\n\n      const filteredData = data.filter(alert => (filters.tipo === \"Todos\" || alert.Tipo === filters.tipo) && (filters.ubicacion === \"Todas\" || alert.Ubicaci√≥n === filters.ubicacion) && new Date(alert.Fecha_hora).toLocaleString(\"en-US\", {\n        month: \"short\"\n      }) === filters.mes // ‚úÖ Comparamos con formato \"Jan\"\n      );\n      console.log(\"‚úÖ Datos filtrados en App.js:\", filteredData); // Verifica los datos filtrados por mes\n\n      setAlerts(filteredData); // Guarda datos filtrados (para gr√°ficos de pastel y l√≠neas)\n    });\n  }, [filters]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AlertTable, {\n      alerts: alerts,\n      setFilters: setFilters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Graphs, {\n      alertData: alerts,\n      fullAlertData: alertsSinFiltrar,\n      filteredMonth: filters.mes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mapa de Alertas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapComponent, {\n      fullAlertData: alertsSinFiltrar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"/ov7bT+YjyWwmL/O4IxUxa6OhzE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","AlertTable","Graphs","fetchAlerts","MapComponent","jsxDEV","_jsxDEV","App","_s","filters","setFilters","estado","tipo","ubicacion","mes","Date","toLocaleString","month","alerts","setAlerts","alertsSinFiltrar","setAlertsSinFiltrar","then","data","console","log","filteredData","filter","alert","Tipo","Ubicaci√≥n","Fecha_hora","className","children","fileName","_jsxFileName","lineNumber","columnNumber","alertData","fullAlertData","filteredMonth","_c","$RefreshReg$"],"sources":["/home/noelia/react/web/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport AlertTable from \"./components/AlertTable\";\nimport Graphs from \"./components/Graphs\";\nimport { fetchAlerts } from \"./services/api\"; \nimport 'leaflet/dist/leaflet.css';\nimport MapComponent from \"./components/MapComponent\";\nimport \"./styles/main.css\";\n\nconst App = () => {\n    const [filters, setFilters] = useState({ \n        estado: \"Activas\", \n        tipo: \"Todos\", \n        ubicacion: \"Todas\", \n        mes: new Date().toLocaleString(\"en-US\", { month: \"short\" }) // ‚úÖ Guardamos el mes en formato \"Jan\"\n    });\n\n    const [alerts, setAlerts] = useState([]); // Datos filtrados\n    const [alertsSinFiltrar, setAlertsSinFiltrar] = useState([]); // Todos los datos\n\n    useEffect(() => {\n        fetchAlerts(filters.estado).then((data) => {\n            console.log(\"üîç Datos obtenidos de fetchAlerts:\", data); // Verifica si la API responde\n            \n            setAlertsSinFiltrar(data); // Guarda todos los datos sin filtrar (para el gr√°fico de barras)\n\n            const filteredData = data.filter(alert => \n                (filters.tipo === \"Todos\" || alert.Tipo === filters.tipo) &&\n                (filters.ubicacion === \"Todas\" || alert.Ubicaci√≥n === filters.ubicacion) &&\n                (new Date(alert.Fecha_hora).toLocaleString(\"en-US\", { month: \"short\" }) === filters.mes) // ‚úÖ Comparamos con formato \"Jan\"\n            );\n\n            console.log(\"‚úÖ Datos filtrados en App.js:\", filteredData); // Verifica los datos filtrados por mes\n            \n            setAlerts(filteredData); // Guarda datos filtrados (para gr√°ficos de pastel y l√≠neas)\n        });\n    }, [filters]);\n\n    return (\n        <div className=\"container\">\n            <Header />\n            <AlertTable alerts={alerts} setFilters={setFilters} />\n            <Graphs alertData={alerts} fullAlertData={alertsSinFiltrar} filteredMonth={filters.mes} />\n\n            <h2>Mapa de Alertas</h2>\n            <MapComponent fullAlertData={alertsSinFiltrar} />       \n        </div>\n    );\n};\n\nexport default App;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,0BAA0B;AACjC,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC;IACnCa,MAAM,EAAE,SAAS;IACjBC,IAAI,EAAE,OAAO;IACbC,SAAS,EAAE,OAAO;IAClBC,GAAG,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,OAAO,EAAE;MAAEC,KAAK,EAAE;IAAQ,CAAC,CAAC,CAAC;EAChE,CAAC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACsB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9DC,SAAS,CAAC,MAAM;IACZI,WAAW,CAACM,OAAO,CAACE,MAAM,CAAC,CAACW,IAAI,CAAEC,IAAI,IAAK;MACvCC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,IAAI,CAAC,CAAC,CAAC;;MAEzDF,mBAAmB,CAACE,IAAI,CAAC,CAAC,CAAC;;MAE3B,MAAMG,YAAY,GAAGH,IAAI,CAACI,MAAM,CAACC,KAAK,IAClC,CAACnB,OAAO,CAACG,IAAI,KAAK,OAAO,IAAIgB,KAAK,CAACC,IAAI,KAAKpB,OAAO,CAACG,IAAI,MACvDH,OAAO,CAACI,SAAS,KAAK,OAAO,IAAIe,KAAK,CAACE,SAAS,KAAKrB,OAAO,CAACI,SAAS,CAAC,IACvE,IAAIE,IAAI,CAACa,KAAK,CAACG,UAAU,CAAC,CAACf,cAAc,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAE;MAAQ,CAAC,CAAC,KAAKR,OAAO,CAACK,GAAI,CAAC;MAC7F,CAAC;MAEDU,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEC,YAAY,CAAC,CAAC,CAAC;;MAE3DP,SAAS,CAACO,YAAY,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;EACN,CAAC,EAAE,CAACjB,OAAO,CAAC,CAAC;EAEb,oBACIH,OAAA;IAAK0B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtB3B,OAAA,CAACN,MAAM;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV/B,OAAA,CAACL,UAAU;MAACiB,MAAM,EAAEA,MAAO;MAACR,UAAU,EAAEA;IAAW;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtD/B,OAAA,CAACJ,MAAM;MAACoC,SAAS,EAAEpB,MAAO;MAACqB,aAAa,EAAEnB,gBAAiB;MAACoB,aAAa,EAAE/B,OAAO,CAACK;IAAI;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE1F/B,OAAA;MAAA2B,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB/B,OAAA,CAACF,YAAY;MAACmC,aAAa,EAAEnB;IAAiB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEd,CAAC;AAAC7B,EAAA,CAvCID,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAyCT,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}